generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = "mysql://avnadmin:AVNS_K_L-iI6blqfKKfs9Vga@mysql-readinglist-readinglist.aivencloud.com:14887/climber?ssl-mode=REQUIRED"
  relationMode = "prisma"
}

enum ClimbType {
  BOULDER
  ROUTE
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]
}
model Workout {
  workout_id   Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  user_id      String?   // Updated type to match the User id
  user         User?     @relation(fields: [user_id], references: [id], onDelete: SetNull) // Relation to User model
  workout_name String?   @db.VarChar(50)
  intensity    Int?
  notes        String?   @db.VarChar(140)
  climbs       Climb[]
  @@index([user_id])
}


model Climb {
  climb_id    Int       @id @default(autoincrement())
  workout_id  Int
  workout     Workout   @relation(fields: [workout_id], references: [workout_id], onDelete: Cascade)
  climb_name  String    @db.VarChar(50)
  type        ClimbType  @default(BOULDER) // Default to boulders
  grade       String    @db.VarChar(5)
  attempts    Int?       
  completed   Int       @db.TinyInt
  @@index([workout_id])
}





